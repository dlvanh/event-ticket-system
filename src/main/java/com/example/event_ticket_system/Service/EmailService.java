package com.example.event_ticket_system.Service;

import com.example.event_ticket_system.Entity.OrderTicket;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmailService {
    private final JavaMailSender mailSender;

    @Autowired
    public EmailService(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }

    /**
     * G·ª≠i email x√°c th·ª±c v·ªõi n·ªôi dung x√°c th·ª±c ƒë∆∞·ª£c truy·ªÅn v√†o.
     */
    public void sendVerificationEmail(String toUserEmail, String verificationCode) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("dlvietanh2k4@gmail.com");
        message.setTo(toUserEmail);
        message.setSubject("M√£ x√°c th·ª±c Email");
        message.setText("M√£ x√°c th·ª±c email c·ªßa b·∫°n l√†: " + verificationCode + "\nM√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.");
        mailSender.send(message);
    }

    /**
     * G·ª≠i email v·ªõi nhi·ªÅu QR codes (m·ªôt cho m·ªói lo·∫°i v√©)
     */
    public void sendMultipleQRCodeEmail(String to, String subject, String text,
                                        List<byte[]> qrCodes, List<OrderTicket> orderTickets) throws MessagingException {

        if (orderTickets == null || orderTickets.isEmpty()) {
            throw new IllegalArgumentException("OrderTickets list cannot be null or empty");
        }

        if (qrCodes == null || qrCodes.size() != orderTickets.size()) {
            throw new IllegalArgumentException("QR codes count must match OrderTickets count");
        }

        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

        helper.setFrom("dlvietanh2k4@gmail.com");
        helper.setTo(to);
        helper.setSubject(subject);

        // T·∫°o n·ªôi dung email chi ti·∫øt v√† ƒë·∫πp h∆°n
        StringBuilder emailContent = new StringBuilder();
        emailContent.append("<html><body>");
        emailContent.append("<h2>üé´ V√© S·ª± Ki·ªán C·ªßa B·∫°n</h2>");
        emailContent.append("<p>").append(text).append("</p>");
        emailContent.append("<br>");
        emailContent.append("<h3>üìã Chi ti·∫øt v√©:</h3>");
        emailContent.append("<table border='1' style='border-collapse: collapse; width: 100%;'>");
        emailContent.append("<tr style='background-color: #f2f2f2;'>");
        emailContent.append("<th style='padding: 8px;'>S·ª± ki·ªán</th>");
        emailContent.append("<th style='padding: 8px;'>Lo·∫°i v√©</th>");
        emailContent.append("<th style='padding: 8px;'>S·ªë l∆∞·ª£ng</th>");
        emailContent.append("<th style='padding: 8px;'>Gi√° (VND)</th>");
        emailContent.append("</tr>");

        double totalAmount = 0;
        for (OrderTicket orderTicket : orderTickets) {
            double itemTotal = orderTicket.getUnitPrice() * orderTicket.getQuantity();
            totalAmount += itemTotal;

            emailContent.append("<tr>");
            emailContent.append("<td style='padding: 8px;'>").append(orderTicket.getTicket().getEvent().getEventName()).append("</td>");
            emailContent.append("<td style='padding: 8px;'>").append(orderTicket.getTicket().getTicketType()).append("</td>");
            emailContent.append("<td style='padding: 8px;'>").append(orderTicket.getQuantity()).append("</td>");
            emailContent.append("<td style='padding: 8px;'>").append(String.format(java.util.Locale.forLanguageTag("vi-VN"), "%,d", (long) itemTotal)).append("</td>");
            emailContent.append("</tr>");
        }

        emailContent.append("<tr style='background-color: #f9f9f9; font-weight: bold;'>");
        emailContent.append("<td colspan='3' style='padding: 8px;'>T·ªïng c·ªông:</td>");
        emailContent.append("<td style='padding: 8px;'>").append(String.format("%.0f", totalAmount)).append(" VND</td>");
        emailContent.append("</tr>");
        emailContent.append("</table>");
        emailContent.append("<br>");
        emailContent.append("<p><strong>üîç L∆∞u √Ω:</strong> M·ªói lo·∫°i v√© c√≥ m·ªôt m√£ QR ri√™ng ƒë∆∞·ª£c ƒë√≠nh k√®m. Vui l√≤ng t·∫£i xu·ªëng v√† l∆∞u tr·ªØ c·∫©n th·∫≠n.</p>");
        emailContent.append("<p><em>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</em></p>");
        emailContent.append("</body></html>");

        helper.setText(emailContent.toString(), true); // true ƒë·ªÉ enable HTML

        // Attach t·ª´ng QR code v·ªõi t√™n ri√™ng bi·ªát v√† an to√†n
        for (int i = 0; i < qrCodes.size(); i++) {
            OrderTicket orderTicket = orderTickets.get(i);
            byte[] qrCode = qrCodes.get(i);

            if (qrCode != null && qrCode.length > 0) {
                // T·∫°o t√™n file an to√†n
                String ticketType = orderTicket.getTicket().getTicketType()
                        .replaceAll("[^a-zA-Z0-9._-]", "_") // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
                        .replaceAll("_{2,}", "_"); // Thay nhi·ªÅu underscore th√†nh m·ªôt

                String fileName = String.format("QR_%d_%s.png",
                        orderTicket.getOrderTicketId(),
                        ticketType);

                helper.addAttachment(fileName, new ByteArrayResource(qrCode));
                System.out.println("Attached QR code: " + fileName + " (" + qrCode.length + " bytes)");
            }
        }

        System.out.println("Sending email to: " + to + " with " + qrCodes.size() + " QR codes");
        mailSender.send(message);
        System.out.println("Email sent successfully!");
    }
}